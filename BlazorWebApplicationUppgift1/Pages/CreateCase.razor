@page "/create-case"


<div class="container mt-5">
    <h1 class="createheadline">Create Case</h1>
    <EditForm Model="caseModel" OnValidSubmit="CreateNewCase">
        <DataAnnotationsValidator />
        <div class="row">
            <div class="form-group col-6 ">
                <label for="description" class="text-label">Customer</label><br>
                <select class="selectblock form-control" @bind="caseModel.CustomerId" required @ref="myref">
                    <option>---Select a Customer---</option>
                    @if (customers != null)
                    {
                        @foreach (var customer in customers)
                        {
                            <option value="@customer.Id">@customer.DisplayName</option>
                        }
                    }
                </select>
            </div>
            <div class="form-group  col-6">
                <label for="description" class="text-label">Description</label>
                <input type="text" class="form-control" id="description" required @bind="@caseModel.Description" />
            </div>
        </div>
            <div>
                <button type="submit" class="btn btn-secondary mt-4 create-button">Create Case</button>
            </div>
        <div id="adminCreateResponse"></div>
    </EditForm>
</div>



@code {
    private CreateCaseModel caseModel;
    private IEnumerable<CustomerModel> customers;
    private IEnumerable<CreateCaseModel> cases;
    private ElementReference myref;
    private async Task CreateNewCase()
    {   
        @if (caseModel.CustomerId != 0)
        {
            var response = await Http.PostAsJsonAsync<CreateCaseModel>("https://localhost:44384/api/Cases/create-case", caseModel);
            @if (response.StatusCode.ToString() == "404")
            {
                await jsRuntime.InvokeVoidAsync(
            "exampleJsFunctions.displayMessage",
            "CustomerId does not exist");
            }
            @if (response.IsSuccessStatusCode)
            {
                cases = await Http.GetFromJsonAsync<IEnumerable<CreateCaseModel>>("https://localhost:44384/api/Cases");
                await jsRuntime.InvokeVoidAsync(
    "exampleJsFunctions.displayMessage",
    "Case has been created");
               
                @if(cases.Count() == 1)
                {
                    await Task.Delay(2000);
                    NavManager.NavigateTo("create-case", true);
                }
                else
                {
                    await Task.Delay(5000);
                    caseModel = new CreateCaseModel();
                }
            }
        }

        else
        {
            await jsRuntime.InvokeVoidAsync(
                 "exampleJsFunctions.displayMessage",
                 "Please Choose A Customer");
            await myref.FocusAsync();
        }
    }
    protected override async Task OnInitializedAsync()
    {
        caseModel = new CreateCaseModel();
        customers = await Http.GetFromJsonAsync<IEnumerable<CustomerModel>>("https://localhost:44384/api/Customers");
    }


}
