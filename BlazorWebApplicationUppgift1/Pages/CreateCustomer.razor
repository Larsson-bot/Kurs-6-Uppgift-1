@page "/create-customer"

<div class="container mt-5">
    <div class="d-flex justify-content-start ms-4">
        <h1 class="createheadline">Create Customer</h1>
    </div>
    <div class="customer-grid p-5">
        <div class="col-8">
            <EditForm Model="customer" OnValidSubmit="CreateNewCustomer">
                <DataAnnotationsValidator />
                <div class="form-floating row mb-3">
                    <input type="text" class="form-control" id="floatingFname" required @bind="customer.FirstName" @ref="myref" placeholder="name@example.com" />
                    <label for="floatingFname">FirstName</label>
                </div>
                <div class="form-floating row mb-3">
                    <input type="text" class="form-control" id="floatingLname" required @bind="customer.LastName" placeholder="name@example.com" />
                    <label for="floatingLname">LastName</label>
                </div>
                <div class="form-floating row mb-3">
                    <input type="email" class="form-control" id="floatingEmail" placeholder="name@example.com" required @bind="customer.Email">
                    <label for="floatingEmail">Email address</label>
                </div>
                <div class="row">
                    <button type="submit" class="btn btn-secondary align-items-center">Create Customer</button>
                </div>
                <div id="adminCreateResponse"></div>
            </EditForm>
        </div>
        <table class="table">
            <thead>
                <tr>
                    <th scope="col">Id</th>
                    <th scope="col">Namn</th>
                    <th scope="col">Email</th>
                </tr>
            </thead>
            <tbody>
                @if (customers != null)
                {
                    @foreach (var customer in customers)
                    {
                        <tr>
                            <td>@customer.Id</td>
                            <td>@customer.DisplayName</td>
                            <td>@customer.Email</td>
                        </tr>
                    }
                }


            </tbody>
        </table>
    </div>
</div>
@code {
    private CustomerModel customer;
    private IEnumerable<CustomerModel> customers;
    private ElementReference myref;

    private async Task CreateNewCustomer()
    {

        await jsRuntime.InvokeVoidAsync(
"exampleJsFunctions.displayMessage",
"");

        var response = await Http.PostAsJsonAsync<CustomerModel>("https://localhost:44384/api/Customers", customer);



        @if (response.IsSuccessStatusCode)
        {
            await GetCustomers();
            @if (customers.Count() == 1)
            {
                NavManager.NavigateTo("create-customer", true);
            }
            else
            {
                customer = new CustomerModel();
                await jsRuntime.InvokeVoidAsync(
    "exampleJsFunctions.displayMessage",
    "Customer has been created");
                await Task.Delay(2000);
                await jsRuntime.InvokeVoidAsync(
                    "exampleJsFunctions.displayMessage",
                 "");
            }
        }
        else
        {
            await jsRuntime.InvokeVoidAsync(
"exampleJsFunctions.displayMessage",
"Email already exists in database! Please choose another.");
        }
    }

    private async Task GetCustomers()
    {
        customers = await Http.GetFromJsonAsync<IEnumerable<CustomerModel>>("https://localhost:44384/api/Customers");
    }

    protected override async Task OnInitializedAsync()
    {
        customer = new CustomerModel();
        await GetCustomers();
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await myref.FocusAsync();
        }
    }
}
