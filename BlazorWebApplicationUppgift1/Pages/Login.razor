@page "/login"
@inject HttpClient Http
@inject NavigationManager NavManager
@inject IJSRuntime jsRuntime
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject Blazored.LocalStorage.ILocalStorageService localStorage
<EditForm Model="loginAdmin" OnValidSubmit="SignInAsync">
    <DataAnnotationsValidator />
    <div class="form-group col-10">
        <input type="email" class="form-check" placeholder="Email" @bind="loginAdmin.Email" required />
    </div>
    <div class="form-group">
        <input type="password" class="form-check" placeholder="Password" required @bind="loginAdmin.Password" />
    </div>
    <button type="submit" class="btn btn-secondary align-items-center">Login</button>
    <div id="adminCreateResponse"></div>
</EditForm>

<h3>Login</h3>

@code {

    private LoginModel loginAdmin;

    private async Task SignInAsync()
    {
        var response = await Http.PostAsJsonAsync<LoginModel>("https://localhost:44384/api/Administrators/signin", loginAdmin);

        @if (response.IsSuccessStatusCode)
        {
            var data = JsonConvert.DeserializeObject<dynamic>(await response.Content.ReadAsStringAsync());
            Console.WriteLine(data);

            await sessionStorage.SetItemAsync("AccessToken", data.accessToken.ToString());
            //await localStorage.SetItemAsync("AccessToken", data.accessToken.ToString());
            NavManager.NavigateTo("/", true);
        }
        else
        {

            await jsRuntime.InvokeVoidAsync(
            "exampleJsFunctions.displayMessage",
            "Invalid Email or Password");
        }
    }



    protected override void OnInitialized()
    {
        loginAdmin = new LoginModel();
        //localStorage.RemoveItemAsync("AccessToken");
    }
}
