@page "/specfic-case"
<div class="container">
    <h1 class="specficheader mb-4">Get Cases On Specific Attributes</h1>
    <div class="container">
        <EditForm Model="currentValue" OnSubmit="GetCasesOnSpecficRequestAsync">
            <div class="row">
                <div class="form-group col-6">
                    <select @bind="currentValue.RequestFromUser" required class="form-control">
                        <option>--Select Request--</option>
                        <option value="GetOnCustomer">GetOnCustomer</option>
                        <option value="GetOnStatus">GetOnStatus</option>
                        <option value="GetOnDate">GetOnDate</option>
                    </select>
                </div>
                @if (currentValue.RequestFromUser == "GetOnCustomer")
                {
                    <div class="form-group col-6">
                        <select @bind="currentValue.ValueFromUser" required class="form-control">
                            <option>--Select Customer--</option>
                            @if (customers != null)
                            {
                                foreach (var customer in customers)
                                {
                                    <option value="@customer.Id">@customer.DisplayName</option>
                                }

                            }
                        </select>

                    </div>
                }
                @if (currentValue.RequestFromUser == "GetOnStatus")
                {
                    <div class="form-group col-6">
                        <select @bind="currentValue.ValueFromUser" required class="form-control">
                            <option>--Select Status--</option>
                            <option value="Not Started">Not Started</option>
                            <option value="Ongoing">Ongoing</option>
                            <option value="Completed">Completed</option>
                        </select>

                    </div>
                }
                @if (currentValue.RequestFromUser == "GetOnDate")
                {
                    <div class="form-group col-6">
                        <select @bind="currentValue.ValueFromUser" required class="form-control">
                            <option>--Select SortingMethod--</option>
                            <option value="Latest">Latest</option>
                            <option value="Oldest">Oldest</option>
                        </select>

                    </div>
                }

            </div>
            <button type="submit" class="btn btn-secondary mt-3 mb-3">Request Data From Api</button>
            <div id="adminCreateResponse"></div>
        </EditForm>
    </div>


    @if (caseModel == null)
    {

    }
    else
    {
    <div class="container">
        <table class="table">
            <thead>
                <tr>
                    <th>CaseId</th>
                    <th>AdminId</th>
                    <th>CustomerId</th>
                    <th>Customer</th>
                    <th>Created</th>
                    <th>Last Changed</th>
                    <th>Description</th>
                    <th>Status</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in caseModel)
                {
                    <tr>
                        <td>@item.Id</td>
                        <td>@item.AdminstratorId</td>
                        <td>@item.CustomerId</td>
                        <td>@item.Customer.DisplayName</td>
                        <td>@item.Created</td>
                        <td>@item.LatestChange</td>
                        <td>@item.Description</td>
                        <td>@item.Status</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>   
    }
</div>


@code {
    private IEnumerable<CreateCaseModel> caseModel;
    private Request currentValue;
    private IEnumerable<CustomerModel> customers;

    protected override async Task OnInitializedAsync()
    {
        currentValue = new Request();
        customers = await Http.GetFromJsonAsync<IEnumerable<CustomerModel>>("https://localhost:44384/api/Customers");
    }

    private async Task GetCasesOnSpecficRequestAsync()
    {
        await jsRuntime.InvokeVoidAsync(
            "exampleJsFunctions.displayMessage",
            "");

        switch (currentValue.RequestFromUser)
        {
        case "GetOnCustomer":
            int result;
            var id = int.TryParse(currentValue.ValueFromUser, out result);
            @if (id == true)
            {
                var urlid = $"https://localhost:44384/api/Cases/getoncustomerid?id={currentValue.ValueFromUser}";
                caseModel = await Http.GetFromJsonAsync<IEnumerable<CreateCaseModel>>(urlid);
                @if (caseModel.Count() == 0)
                {
                    await jsRuntime.InvokeVoidAsync(
                        "exampleJsFunctions.displayMessage",
                        "This Customer is not involved in any cases!.");
                }
                break;
            }
            else
            {
                await jsRuntime.InvokeVoidAsync(
                        "exampleJsFunctions.displayMessage",
                        "Please select a customer");

                break;
            }

        case "GetOnStatus":
            @if (currentValue.ValueFromUser == "Not Started" || currentValue.ValueFromUser == "Ongoing" || currentValue.ValueFromUser == "Completed")
            {
                caseModel = await Http.GetFromJsonAsync<IEnumerable<CreateCaseModel>>($"https://localhost:44384/api/Cases/getonstatus?status={currentValue.ValueFromUser}");
                @if (caseModel.Count() == 0)
                {
                    await jsRuntime.InvokeVoidAsync(
                        "exampleJsFunctions.displayMessage",
                        "The API returned a empty list.");
                }
                break;
            }
            else
            {
                await jsRuntime.InvokeVoidAsync(
                        "exampleJsFunctions.displayMessage",
                        "Please select a status.(Not Started, Ongoing, Completed)");
                break;
            }
        case "GetOnDate":
            @if (currentValue.ValueFromUser == "Oldest" || currentValue.ValueFromUser == "oldest" || currentValue.ValueFromUser == "Latest" || currentValue.ValueFromUser == "latest")
            {
                caseModel = await Http.GetFromJsonAsync<IEnumerable<CreateCaseModel>>($"https://localhost:44384/api/Cases/getondate?ordervalue={currentValue.ValueFromUser}");
                @if (caseModel.Count() == 0)
                {
                    await jsRuntime.InvokeVoidAsync(
                        "exampleJsFunctions.displayMessage",
                        "The API returned a empty list.");
                }
                break;
            }
            else
            {
                await jsRuntime.InvokeVoidAsync(
                    "exampleJsFunctions.displayMessage",
                    "Please select a datecommand.");
                break;
            }
        default:
            {
                await jsRuntime.InvokeVoidAsync(
                    "exampleJsFunctions.displayMessage",
                    "Please select a Request");
                break;
            }
        }
    }
        public class Request
        {
            public string RequestFromUser { get; set; }
            public string ValueFromUser { get; set; }
        }
}